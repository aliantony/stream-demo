spring:
  application:
    name: demo-producer-application
  cloud:
    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类
    stream:
      # Binder 配置项，对应 BinderProperties Map
      # binders:
      # Binding 配置项，对应 BindingProperties Map
      bindings:
        output-channel:
          destination: my_output1 # 目的地。这里使用 Kafka Topic
          content-type: application/json # 内容格式。这里使用 JSON
          partition-key-expression: payload['id'] # 分区 key 表达式。该表达式基于 Spring EL，从消息中获得分区 key。从消息的header获取headers['partitionKey']
      # Spring Cloud Stream Kafka 配置项
      kafka:
        # Kafka Binder 配置项，对应 KafkaBinderConfigurationProperties 类
        binder:
          brokers: 192.168.5.102:9092 # 指定 Kafka Broker 地址，可以设置多个，以逗号分隔
          transaction: # 对应 KafkaBinderConfigurationProperties.Transaction 类
            transaction-id-prefix: demo. # 事务编号前缀
            producer:
              configuration:
                retries: 1 # 发送失败时，重试发送的次数
                acks: all # 0-不应答。1-leader 应答。all-所有 leader 和 follower 应答。Must set acks to all in order to use the idempotent producer. Otherwise we cannot guarantee idempotence
        # Kafka 自定义 Binding 配置项，对应 KafkaBindingProperties Map
        bindings:
          output-channel:
            # Kafka Producer 配置项，对应 KafkaProducerProperties 类
            producer:
              sync: true # 是否同步发送消息，默认为 false 异步。
              batch-timeout: 30000 # 批处理延迟时间上限。这里配置为 30 * 1000 ms 过后，不管是否消息数量是否到达 batch-size 或者消息大小到达 buffer-memory 后，都直接发送一次请求
              buffer-size: 33554432 # 每次批量发送消息的最大内存
server:
  port: 8080

management:
  endpoints:
    web:
      exposure:
        include: '*' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。
  endpoint:
    # Health 端点配置项，对应 HealthProperties 配置类
    health:
      enabled: true # 是否开启。默认为 true 开启。
      show-details: ALWAYS # 何时显示完整的健康信息。默认为 NEVER 都不展示。可选 WHEN_AUTHORIZED 当经过授权的用户；可选 ALWAYS 总是展示。
